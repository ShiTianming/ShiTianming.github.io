<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>scala之传名参数和传值参数</title>
      <link href="/2018/08/02/scala%E4%B9%8B%E4%BC%A0%E5%90%8D%E5%8F%82%E6%95%B0%E5%92%8C%E4%BC%A0%E5%80%BC%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/02/scala%E4%B9%8B%E4%BC%A0%E5%90%8D%E5%8F%82%E6%95%B0%E5%92%8C%E4%BC%A0%E5%80%BC%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>传值参数（by-value parameter）</strong> 在函数调用之前表达式会被求值，例如<code>Int</code>，<code>Long</code>等数值参数类型；<strong>传名参数（by-name parameter）</strong> 在函数调用前表达式不会被求值，而是作为一个匿名函数传递。在介绍两者区别之前，先说一下 <strong>=&gt;</strong> 的用法。</p><h2 id="gt-用法"><a href="#gt-用法" class="headerlink" title="=&gt; 用法"></a>=&gt; 用法</h2><p><strong>=&gt;</strong> 用法主要有以下几点：</p><ul><li><p>对于值，相当于lambda表达式：</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).map&#123;(x: <span class="type">Int</span>) =&gt; x * <span class="number">2</span>&#125;</span><br><span class="line">res0: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p>对于类型，<strong>=&gt;</strong> 用于分开两端的类型。</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">String</span>] = myInt =&gt; <span class="string">"myInt: "</span> + myInt.toString</span><br><span class="line">test: <span class="type">Int</span> =&gt; <span class="type">String</span> = &lt;function1&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test(<span class="number">10</span>)</span><br><span class="line">res0: <span class="type">String</span> = myInt: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Int</span> =&gt; <span class="type">String</span> = myInt =&gt; <span class="string">"myInt: "</span> + myInt.toString</span><br><span class="line">test: <span class="type">Int</span> =&gt; <span class="type">String</span> = &lt;function1&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test(<span class="number">10</span>)</span><br><span class="line">res1: <span class="type">String</span> = myInt: <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>如果参数为空，即 <strong>=&gt;</strong> 左边为空，形式为 <strong>()=&gt;T</strong>：</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Function0</span>[<span class="type">String</span>] = () =&gt; <span class="string">"Hello world"</span></span><br><span class="line">test: () =&gt; <span class="type">String</span> = &lt;function0&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test()</span><br><span class="line">res11: <span class="type">String</span> = <span class="type">Hello</span> world</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> test: () =&gt; <span class="type">String</span> = () =&gt; <span class="string">"Hello world"</span></span><br><span class="line">test: () =&gt; <span class="type">String</span> = &lt;function0&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test()</span><br><span class="line">res12: <span class="type">String</span> = <span class="type">Hello</span> world</span><br></pre></td></tr></table></figure></li><li><p>如果无返回值，即形式为 <strong>A[,B,…]=&gt;Unit</strong>：</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Unit</span>] =myInt =&gt; println(myInt)</span><br><span class="line">test: <span class="type">Int</span> =&gt; <span class="type">Unit</span> = &lt;function1&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Int</span> =&gt; <span class="type">Unit</span> =myInt =&gt; println(myInt)</span><br><span class="line">test: <span class="type">Int</span> =&gt; <span class="type">Unit</span> = &lt;function1&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>如果无参数无返回值，即形式为 <strong>[]=&gt;Unit</strong>：</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> test: <span class="type">Function0</span>[<span class="type">Unit</span>] = () =&gt; println(<span class="string">"Hello world"</span>)</span><br><span class="line">test: () =&gt; <span class="type">Unit</span> = &lt;function0&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test()</span><br><span class="line"><span class="type">Hello</span> world</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> test: () =&gt; <span class="type">Unit</span> = () =&gt; println(<span class="string">"Hello world"</span>)</span><br><span class="line">test: () =&gt; <span class="type">Unit</span> = &lt;function0&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; test()</span><br><span class="line"><span class="type">Hello</span> world</span><br></pre></td></tr></table></figure></li><li><p>如果作为一个函数的参数的类型声明，且坐便没有符号，如<code>def func(param: =&gt; T)</code>。这种形式叫做<strong>传名参数</strong>；</p></li><li>在case语句中，<strong>=&gt;</strong> 用于分隔模式和结果表达式。</li></ul><h2 id="传值参数"><a href="#传值参数" class="headerlink" title="传值参数"></a>传值参数</h2><blockquote><p>先对表达式进行计算，然后将结果带入函数。</p><ul><li>简单类型  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(s: <span class="type">String</span>) = &#123;</span><br><span class="line">    println(<span class="string">"call strToInt"</span>)</span><br><span class="line">    s.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    strToInt(&#123;</span><br><span class="line">      println(<span class="string">"call by value"</span>); <span class="string">"10"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//call by value</span></span><br><span class="line"><span class="comment">//call strToInt</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>复杂类型  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(f: <span class="type">String</span> =&gt; <span class="type">Int</span> =&gt; <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    println(<span class="string">"call func"</span>)</span><br><span class="line">    f(<span class="string">"1"</span>)(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">curry</span></span>(s: <span class="type">String</span>)(i: <span class="type">Int</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    s.toLong + i.toLong</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    func &#123;</span><br><span class="line">      println(<span class="string">"call by value"</span>)</span><br><span class="line">      curry</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//call by value</span></span><br><span class="line"><span class="comment">//call func</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="传名参数"><a href="#传名参数" class="headerlink" title="传名参数"></a>传名参数</h2><blockquote><p>参数在进入函数后，每次在函数体内调用的时候才会计算。</p><ul><li>简单类型  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strIoInt</span></span>(s: =&gt; <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    println(<span class="string">"call strToInt"</span>)</span><br><span class="line">    s.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    strIoInt(&#123;</span><br><span class="line">      println(<span class="string">"call by name"</span>)</span><br><span class="line">      <span class="string">"10"</span></span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// call strToInt</span></span><br><span class="line"><span class="comment">// call by name</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>复杂类型  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(f: =&gt; <span class="type">String</span> =&gt; <span class="type">Int</span> =&gt; <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    println(<span class="string">"call func"</span>)</span><br><span class="line">    f(<span class="string">"1"</span>)(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">curry</span></span>(s: <span class="type">String</span>)(i: <span class="type">Int</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    s.toLong + i.toLong</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    func &#123;</span><br><span class="line">      println(<span class="string">"call by name"</span>)</span><br><span class="line">      curry</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// call func</span></span><br><span class="line"><span class="comment">// call by name</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>() =&gt; T</strong> 可以简写成 <strong>=&gt; T</strong>。</p><ul><li>示例-1  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strIoInt</span></span>(s: () =&gt; <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    println(<span class="string">"call strToInt"</span>)</span><br><span class="line">    s().toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 注意调用的顺序</span></span><br><span class="line">    strIoInt(&#123;</span><br><span class="line">      println(<span class="string">"call by value"</span>)</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        println(<span class="string">"call by name"</span>); <span class="string">"10"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output：</span></span><br><span class="line"><span class="comment">// call by value</span></span><br><span class="line"><span class="comment">// call strToInt</span></span><br><span class="line"><span class="comment">// call by name</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>示例-2  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(f: () =&gt; <span class="type">String</span> =&gt; <span class="type">Int</span> =&gt; <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    println(<span class="string">"call func"</span>)</span><br><span class="line">    f()(<span class="string">"1"</span>)(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">curry</span></span>(s: <span class="type">String</span>)(i: <span class="type">Int</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    s.toLong + i.toLong</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 注意调用的顺序</span></span><br><span class="line">    func(&#123;</span><br><span class="line">      println(<span class="string">"call by value"</span>)</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        println(<span class="string">"call by name"</span>)</span><br><span class="line">        curry</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// call by value</span></span><br><span class="line"><span class="comment">// call func</span></span><br><span class="line"><span class="comment">// call by name</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MapReduce的工作机制（四）</title>
      <link href="/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="MapReduce之部分源码分析"><a href="#MapReduce之部分源码分析" class="headerlink" title="MapReduce之部分源码分析"></a><strong>MapReduce之部分源码分析</strong></h2><p>主要对部分重要函数源码进行分析。</p><h3 id="OutputCommitters"><a href="#OutputCommitters" class="headerlink" title="OutputCommitters"></a><strong>OutputCommitters</strong></h3><p>MapReduce使用一个提交协议确保作业和任务都完全成功或者失败。这个行为通过<code>OutputCommitters</code>实现。<br><code>OutputCommitters</code>的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputCommitter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setupJob</span><span class="params">(JobContext jobContext)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanupJob</span><span class="params">(JobContext jobContext)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitJob</span><span class="params">(JobContext jobContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    cleanupJob(jobContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abortJob</span><span class="params">(JobContext jobContext, JobStatus.State state)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    cleanupJob(jobContext);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setupTask</span><span class="params">(TaskAttemptContext taskContext)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">needsTaskCommit</span><span class="params">(TaskAttemptContext taskContext)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">commitTask</span><span class="params">(TaskAttemptContext taskContext)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abortTask</span><span class="params">(TaskAttemptContext taskContext)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRecoverySupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRecoverySupported</span><span class="params">(JobContext jobContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isRecoverySupported();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTask</span><span class="params">(TaskAttemptContext taskContext)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>setupJob()</code>方法在作业运行前调用，通常用来执行初始化操作。</li><li>如果作业成功，就调用<code>commitJob()</code>方法，在默认的基于文件的实现中，它用于删除临时的工作空间并在输出目录中创建一个名为_SUCCESS的隐藏的标志文件，以此告知文件系统的客户端该作业完成。</li><li>如果作业不成功，就通过状态对象调用<code>abortJob()</code>，以为这该作业是否失败或终止。在默认的实现中，将删除作业的临时工作空间。</li><li>任务级别上。在任务执行之前先调用<code>setupTask()</code>方法，默认实现不做任何事情。因为针对任务输出命名的临时目录在写任务输出的时候被创建。</li><li>任务的提交阶段是可选的，并通过从<code>needsTaskCommit()</code>返回的false值关闭它。这使得执行框架不必为任务运行分布提交协议，也不需要<code>CommitTask()</code>或者<code>abortTask()</code>。</li><li>如果任务成功，就调用<code>commitTask()</code>，在默认的实现中它将临时的任务输出目录移动到最后的输出路径。否则，执行框架调用<code>abortTask()</code>，它负责删除临时的任务输出目录。</li><li>执行框架保证特定任务在有多次任务尝试的情况下，只有一个任务会被提交，其他的则被取消。</li></ul>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MapReduce的工作机制（三）</title>
      <link href="/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="MapReduce之shuffle和排序"><a href="#MapReduce之shuffle和排序" class="headerlink" title="MapReduce之shuffle和排序"></a><strong>MapReduce之shuffle和排序</strong></h2><p>MapReduce确保每个reducer的输入都是按键排序的。系统执行排序、将map输出作为输入传给reducer的过程称为shuffle。</p><h3 id="map端"><a href="#map端" class="headerlink" title="map端"></a><strong>map端</strong></h3><p>map函数开始产生输出时，利用缓冲的方式写到内存并出于效率的考虑进行预排序。</p><p><img src="Snipaste_2018-08-01_15-02-29.png" alt=""></p><ul><li>每个map任务都有一个环形内存缓冲区用于存储任务输出。默认缓冲区大小为100MB（可以通过<code>mapreduce.task.io.sort.mb</code>属性调整）。一旦缓冲内容达到阈值（<code>mapreduce.map.sort.spill.percent</code>属性，默认为0.8），一个后台线程便开始把内容溢出到磁盘。</li><li>在溢出写到磁盘过程中，map输出继续写到缓冲区。但如果在此期间缓冲区被填满，map会被阻塞直到写磁盘过程完成。溢出内容写到指定目录中（<code>mapreduce.cluster.local.dir</code>属性指定）。</li><li>在写磁盘之前，线程首先根据reducer把数据划分成相应的分区。在每个分区中，后台线程按键进行内存中排序，如果有一个combiner函数，它就在排序后的输出上运行。运行combiner函数使得map输出结果更紧凑，因此减少写到磁盘的数据和传递给reducer的数据。</li><li>map任务写完最后一个输出记录后，会有几个溢出文件。在任务完成之前，溢出文件被合并成一个已分区且已排序的输出文件。</li><li>如果至少存在3个溢出文件（<code>mapreduce.map.combine.minspills</code>属性设置）时，则combiner就会在输出文件写到磁盘之前再次运行。如果只有1或2个溢出文件，则不会为该map输出运行combiner（combiner的运行不会影响最终结果）。</li><li>将map输出写到磁盘的过程中对其压缩会加快写磁盘的速度，节约磁盘空间，并且减少传给reducer的数据量。默认不进行压缩，将<code>mapreduce.map.output.compress</code>设为True启用压缩，压缩格式由<code>mapreduce.map.output.compress.codec</code>指定。</li><li>reducer通过HTTP得到输出文件的分区。</li></ul><h3 id="reduce端"><a href="#reduce端" class="headerlink" title="reduce端"></a><strong>reduce端</strong></h3><p>reduce任务需要集群上若干个map任务的输出作为其分区文件。每个map任务完成时间可能不同，因此在每个任务完成时，reduce任务就开始复制其输出。这是reduce任务的复制阶段。reduce任务有少量复制线程，因此能够并行取得map输出。默认是5个线程。</p><blockquote><p>reduce如何知道要从哪台机器取得map输出呢？<br>map任务完成后，会使用心跳机制通知ApplicationMaster。因此，对于指定作业，ApplicationMaster知道map输出和主机位置之间的映射关系。reduce中的一个线程定期询问master以便获取map输出主机的位置，知道获得所有输出位置。</p></blockquote><ul><li>如果map输出相当小，会被复制到reduce的JVM中，否则被复制到磁盘中。随着磁盘上副本增多，后台线程会将他们合并为更大的、排好序的文件。（<strong>压缩的map输出都必须在内存中被解压缩</strong>）</li><li>复制完所有map输出后，reduce任务进入排序阶段（实际上是合并，排序是在map端进行的），这个阶段将合并map输出，维持其顺序排序。假如有50个map输出，合并因子是10，则会5次合并，最后生成5个中间文件。</li><li>最后，reduce阶段直接把数据输入给reduce函数，并没有将这5个文件合并成一个已排序的文件作为一趟。</li><li>在reduce阶段，对已排序输出的每个键调用reduce函数。此阶段的输出直接写到输出文件系统。</li></ul>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MapReduce的工作机制（二）</title>
      <link href="/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="MapReduce之数据流"><a href="#MapReduce之数据流" class="headerlink" title="MapReduce之数据流"></a><strong>MapReduce之数据流</strong></h2><p>MapReduce作业是客户端需要执行的衣蛾工作单元，它包括输入数据、MapReduce程序和配置信息。Hadoop将作业分成若干个任务来执行，包括map任务和reduce任务。这些任务运行在集群的节点上，并通过YARN进行调度。</p><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a><strong>分片</strong></h3><p>Hadoop将MapReduce的输入数据划分成等长的小数据块，称为输入分片（<code>input split</code>）。Hadoop为每个分片构建一个map任务，并由该任务来运行用户定义的map函数从而处理分片中的每条记录。<br>对于大多数作业而言，一个合理的分片大小趋向于HDFS一个块的大小，默认是128MB。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h3><p>Hadoop在存储有输入数据的节点上运行map任务，可以避免使用集群带宽资源，提高性能（数据本地化优化<code>data locality optimization</code>）。<br>map任务将其输出写入本地磁盘而非HDFS。因为map的输出是中间结果，一旦作业完成，map的结果就可以删除。如果运行map任务的节点在将map中间结果传送给reduce任务之前失败，Hadoop将在另一个节点上重新运行这个map任务以再次构建map中间结果。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><strong>reduce</strong></h3><p>reduce任务并不具备数据本地化的优势，单个reduce任务的输入通常来自于所有的mapper的输出。数据在reduce端合并，然后由用户定义的reduce函数处理。reduce输出的结果通常存储在HDFS上。<br>reduce任务的数量并非由输入数据的大小决定，而是独立指定的。<br>如果有多个reduce任务，每个map任务就会针对输出进行分区，即为每个reduce任务建一个分区。每个分区有许多键（及其对应的值），但每个键对应的键-值对记录都在同一分区中。默认通过哈希函数分区。</p><ul><li>一个reduce任务的MapReduce数据流<br><img src="Snipaste_2018-08-01_14-39-11.png" alt=""></li><li>多个reduce任务的MapReduce数据流<br><img src="Snipaste_2018-08-01_14-45-22.png" alt=""></li><li>当数据处理完全并行，无需shuffle<br><img src="Snipaste_2018-08-01_14-46-22.png" alt=""></li></ul><h3 id="combiner函数"><a href="#combiner函数" class="headerlink" title="combiner函数"></a><strong>combiner函数</strong></h3><p>集群上的可用带宽限制了MapReduce作业的数量，因此避免map和reduce任务之间的数据传输是有利的。Hadoop允许用户针对map任务的输出指定一个combiner，其输出作为reduce函数的输入。<br>combiner属于优化方案，所以Hadoop无法确定要对一个指定的map任务输出记录调用多少次combiner。<strong>不管调用多少次，reduce的结果都是一样的。</strong></p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MapReduce的工作机制（一）</title>
      <link href="/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/08/01/MapReduce%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="MapReduce作业简介"><a href="#MapReduce作业简介" class="headerlink" title="MapReduce作业简介"></a><strong>MapReduce作业简介</strong></h2><p>MapReduce作业通过Job对象的<code>submit()</code>方法来调用。整个过程大概可以描述为：</p><ul><li>客户端，提交MapReduce作业；</li><li>YARN资源管理器，负责协调集群上计算机资源的分配；</li><li>YARN节点管理器，负责启动和监视集群中机器的计算容器（container）；</li><li>MapReduce的ApplicationMaster，负责协调运行MapReduce作业的任务。它和MapReduce任务在容器中运行，这些容器由资源管理分配并由节点管理器进行管理；</li><li>分布式文件系统，用来与其他实体间共享作业文件。</li></ul><p><img src="Snipaste_2018-08-01_09-51-42.png" alt=""></p><h2 id="MapReduce运行流程"><a href="#MapReduce运行流程" class="headerlink" title="MapReduce运行流程"></a><strong>MapReduce运行流程</strong></h2><h3 id="作业的提交"><a href="#作业的提交" class="headerlink" title="作业的提交"></a><strong>作业的提交</strong></h3><p>Job的<code>submit()</code>方法创建了一个<code>JobSubmitter</code>实例，该实例调用<code>submitJobInternal()</code>方法，该方法用于将任务提交到集群。查看源码注释得知作业提交过程如下：</p><ul><li>向资源管理器请求一个应用ID，用于MapReduce作业的ID（步骤2）；</li><li>检查作业的输入输出路径；</li><li>计算作业的输入分片；</li><li>设置运行作业所需要的信息；</li><li>复制作业的jar包、配置文件和j算所得的输入分片复制到以ID命名的分布式文件系统中（步骤3）;</li><li>通过调用YARN中的<code>submitApplication()</code>方法提交作业。并监视器状态（步骤4）。</li></ul><h3 id="作业的初始化"><a href="#作业的初始化" class="headerlink" title="作业的初始化"></a><strong>作业的初始化</strong></h3><p>YARN收到<code>submitApplication()</code>调用消息后，便将请求传递给调度器（scheduler）。调度器分配一个容器，然后资源管理器在节点管理器的管理下载容器中启动ApplicationMaster进程（步骤5a和5b）。<br>ApplicationMaster是一个java应用程序，其主类是<code>MRAppMaster</code>。由于将接受任务的进度和完成报告（步骤6），因此ApplicationMaster对作业的初始化时通过创建多个簿记对象以保持对做作业进度的跟踪来完成的。接下来，它接受来自共享文件系统的、在客户端计算的输入分片（步骤7）。然后对每个分片创建一个map任务对象以及由<code>mapreduce.job.reduces</code>属性（通过<code>setNumReduceTasks()</code>方法设置）确定多个renduce任务对象。任务ID在此时分配。<br>ApplicationMaster必须决定如何运行构成MapReduce作业的各个任务。如果作业很小，就选择和自己在同一个JVM上运行任务。当ApplicationMaster判断在新的容器中分配和运行任务的开销大于并行运行它们的开销时就会发生这一情况。这称之为uber任务运行。<br>最后，ApplicationMaster设置<code>OutputCommitter</code>。</p><h3 id="任务的分配"><a href="#任务的分配" class="headerlink" title="任务的分配"></a><strong>任务的分配</strong></h3><p>如果作业不适合作为uber任务运行，那么ApplicationMaster就会未改作业中的所有map任务和reduce任务向资源管理器请求容器（步骤8）。首先为Map任务发出请求，知道有5%的map任务已经完成时，为reduce任务的请求才会发出（map的优先级高于reduce）。<br>reduce任务能够在集群中任意位置运行，但是map任务的请求有着数据本地化的局限。<br>请求也为任务指定了内存需求和CPU数。</p><h3 id="任务的执行"><a href="#任务的执行" class="headerlink" title="任务的执行"></a><strong>任务的执行</strong></h3><p>一旦scheduler为任务分配了一个特定节点上的container，ApplicationMaster就通过与NodeManager通信来启动container（步骤9a和9b）。该任务由类<code>YARNChild</code>的一个java应用程序执行。在任务运行之前，首先将任务需要的资源本地化，包括作业的配置、jar文件和所有来自分布式缓存的文件（步骤10）。最后运行map任务和reduce任务（步骤11）。<br>每个任务动能够执行setup和commit动作，他们和任务本身在同一个JVM中运行，并由作业的<code>OutputCommitter</code>确定。对于基于文件的作业，提交动作将任务输出由临时位置搬移到最终位置。提交协议确保当推测执行被启用时，只有一个任务副本被提交，其他的都被取消。</p><h3 id="任务的状态"><a href="#任务的状态" class="headerlink" title="任务的状态"></a><strong>任务的状态</strong></h3><p>一个作业和它的每个任务都有一个状态，包括：</p><ul><li>作业或任务的状态（运行中、成功、失败）；</li><li>map和reduce的进度；</li><li>作业计数器的值；</li><li>状态消息或描述。</li></ul><p>任务在运行时，对其进度保持追踪。对map任务，任务进度是已处理输入所占的比例；对reduce任务，系统会估计已处理reduce输入的比例。<br><img src="Snipaste_2018-08-01_11-28-06.png" alt=""></p><h3 id="作业的完成"><a href="#作业的完成" class="headerlink" title="作业的完成"></a><strong>作业的完成</strong></h3><p>当ApplicationMaster收到作业最后一个任务完成的通知后，便把作业的状态设置为“成功”。于是job打印一条消息告知用户，然后从<code>waitForCompletion()</code>方法返回。job的统计信息和计数值也输出到控制台。</p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>YARN中的资源调度</title>
      <link href="/2018/07/30/YARN%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/"/>
      <url>/2018/07/30/YARN%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>YARN中有三种调度器可用：FIFO调度器（FIFO Scheduler），容量调度器（Capacity Scheduler）和公平调度器（Fair Scheduler）。</p><h2 id="FIFO调度器（FIFO-Scheduler）"><a href="#FIFO调度器（FIFO-Scheduler）" class="headerlink" title="FIFO调度器（FIFO Scheduler）"></a>FIFO调度器（FIFO Scheduler）</h2><p><img src="Snipaste_2018-07-30_15-26-45.png" alt=""><br>FIFO调度器将应用放置在一个队列中，然后按照提交的顺序（先进先出）运行应用。首先为队列中第一个应用的请求分配资源，第一个应用的请求满足后再依次为队列中下一个应用服务。<br>FIFO调度器优点在于简单易懂，不需要任何配置，但是不适合大集群。大的应用会占用集群中的所有资源，所以每个应用必须等待直到轮到自己运行。</p><h2 id="容量调度器（Capacity-Scheduler）"><a href="#容量调度器（Capacity-Scheduler）" class="headerlink" title="容量调度器（Capacity Scheduler）"></a>容量调度器（Capacity Scheduler）</h2><p><img src="Snipaste_2018-07-30_15-31-04.png" alt=""><br>使用容量调度器时，一个独立的专门队列保证小作业一提交就可以启动，由于队列容量是为那个队列中的作业所保留的，因此这种策略是以整个集群的利用率为代价的。这意味着相比于FIFO调度器，大作业执行的时间要长。<br>容量调度器允许多个组织共享一个集群，每个组织可以分配到全部集群资源的一部分。每个组织被配置一个专门的队列，每个队列被配置为可以使用一定的集群资源。对了可以进一步按层次划分，这样每个组织内的不同用户能够共享该组织队列所分配的资源。在一个队列内，使用FIFO调度策略对应用进行调度。<br>单个作业使用的资源不会超过其队列容量。然而，如果队列中有多个作业，导致队列资源不够用，这时如果仍有可用的空闲资源，那么容量调度器可能会将空余的资源分配给队列中的作业，哪怕这会超过队列容量。这称为“弹性队列”（queue elasticity）。<br>正常操作时，容量调度器不会通过强行终止来抢占容器。因此，如果一个队列一开始资源够用，然后随着需求增长，资源开始不够用时，那么这个队列就只能等着其他队列释放容器资源。一般情况下，为队列设置一个最大容量限制，这样这个队列就不会过多侵占其他队列的容量了。</p><h2 id="公平调度器（Fair-SCheduler）"><a href="#公平调度器（Fair-SCheduler）" class="headerlink" title="公平调度器（Fair SCheduler）"></a>公平调度器（Fair SCheduler）</h2><p><img src="Snipaste_2018-07-30_15-42-29.png" alt=""><br>公平调度器旨在为所有运行的应用公平分配资源。<br>假设有两个用户A和B，分别拥有自己的队列。A启动一个作业，在B没有需求时，A会分配到全部可用资源；当A的作业仍在运行时，B启动一个作业，一段 时间后，每个作业都用到了一半的集群资源。这时，如果B启动了第二个走也且其他作业仍在运行，那么第二个作业将和B的其他作业（这里是第一个）共享资源，因此B的每个作业将占用四分之一的集群资源，而A仍继续占用一半的集群资源。最终的结果是资源在用户之间实现了公平共享。<br><img src="Snipaste_2018-07-30_15-44-31.png" alt=""></p><ul><li>抢占<br>公平调度器支持<strong>抢占</strong>功能。所谓抢占，就是允许调度器终止那些占用资源超过了其公平共享份额的队列的容器，这些融资资源释放后可以分配给资源数量低于应得份额的队列。抢占会降低这个集群的效率，因为被终止的<code>Containers</code>需要重新执行。</li><li>延迟调度<br>如果一个应用请求某个节点，那么极有可能此时有其他容器正在该节点上运行。实践发现，此时如果等待一小段时间（不超过几秒），能够增鸡杂在所请求的节点上分配到一个容器的机会，从而可以提高集群的效率。这个特性称为延迟调度（delay scheduling）。容量调度器和公平调度器都支持延迟调度。</li></ul>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> YARN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YARN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>YARN架构原理详解</title>
      <link href="/2018/07/30/YARN%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/07/30/YARN%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="YARN基本组件"><a href="#YARN基本组件" class="headerlink" title="YARN基本组件"></a>YARN基本组件</h2><p><strong>YARN的基本理念是将资源管理和任务调度/监控分成两个独立的服务：全局的资源管理器（<code>ResoureManager</code>）和单独任务的<code>ApplicationMaster</code>。</strong> 一个应用既是单独的一个任务，也是一个<code>DAG</code>的任务。<br><img src="Snipaste_2018-07-30_11-38-02.png" alt=""><br>YARN总体上仍然是<code>master/slave</code>结构，在整个资源管理框架中，<code>ResourceManager</code>是<code>master</code>，<code>NodeManager</code>是<code>slave</code>。<code>ResourceManager</code>负责对各个<code>NodeManager</code>上资源进行统一管理和调度。当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的<code>ApplicationMaster</code>，其负责向<code>ResourceManager</code>申请资源，并要求<code>NodeManager</code>启动可以占用一定资源的任务。由于不同的<code>ApplicationMaster</code>被分布到不同的节点上，因此他们之间不会互相影响。</p><h3 id="ResourceManger"><a href="#ResourceManger" class="headerlink" title="ResourceManger"></a><strong>ResourceManger</strong></h3><p><code>ResourceManager</code>是一个全局资源管理器，负责整个系统的资源管理和分配，包括处理客户端的请求、启动\监控<code>Applicationmaster</code>、监控<code>NodeManager</code>、资源的分配和调度。其主要有两个组件构成：调度器（<code>Scheduler</code>）和应用程序管理器(<code>ApplicationsMaster</code>)。</p><ul><li>调度器<br>调度器根据容量、队列等限制条件（如每个队列分配一定的资源、最多执行一定数量的作业等），将系统中的资源分配给各个正在运行的应用程序。该调度器是一个“纯调度器”，其不再从事任何具体应用程序相关的工作，比如不负责监控或跟踪应用的执行状态等，也不负责重新启动因应用执行失败或硬件故障而产生的失败任务。调度器仅根据各个应用的资源需求进行资源分配，资源分配单位用“资源容器”（<code>Resource Container</code>，简称<code>Container</code>）表示。<code>Container</code>是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。</li><li>应用程序管理器<br>应用程序管理器负责整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动<code>ApplicationMaster</code>、监控<code>ApplicationMaster</code>运行状态并在失败时重新启动它等。</li></ul><h3 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a><strong>ApplicationMaster</strong></h3><p>管理YARN内运行的应用程序的每个实例。其主要是为应用程序申请资源并进一步分配给内部任务，负责协调来自<code>ResoureManager</code>的资源，并通过<code>NodeManger</code>监控<code>Container</code>的执行和资源的使用情况。</p><h3 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a><strong>NodeManager</strong></h3><p>整个集群中有多个<code>NodeManager</code>，负责每个节点上的资源和使用。<br>功能：</p><ul><li>单个节点上的资源管理和任务；</li><li>处理来自<code>ResourceManager</code>的命令；</li><li>处理来自<code>ApplicationMaster</code>的命令。</li></ul><p><code>NodeManager</code>管理着抽象容器，这些抽象容器代表着一些特定程序使用针对每个节点的资源。<code>NodeManager</code>定时向<code>ResourceManager</code>汇报本节点上的资源使用情况和各个<code>Container</code>的运行状态。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a><strong>Container</strong></h3><p><code>Container</code>是YARN中的资源抽象，它封装了某个节点上的多维度资源。当<code>ApplicationManager</code>向<code>ResourceManager</code>申请资源时，<code>ResourceManager</code>为<code>ApplicationManager</code>返回的资源便是用<code>Container</code>表示的。YARN会为每个任务分配一个<code>Container</code>，且该任务只能使用<code>Container</code>中的资源。其是一个动态资源划分单位，是根据应用程序的需求动态生成的。</p><h2 id="YARN的资源管理"><a href="#YARN的资源管理" class="headerlink" title="YARN的资源管理"></a>YARN的资源管理</h2><blockquote><ol><li>资源调度和隔离是YARN作为一个资源管理系统，最重要最基础的两个功能。资源调度由<code>ResourceManager</code>完成，资源隔离由<code>NodeManager</code>完成。</li><li><code>ResourceManager</code>将某个<code>NodeManager</code>上资源分配给任务后，<code>NodeManager</code>需按照要求为任务提供相应的资源，甚至保证这些资源具有独占性，为任务提供基础和保证。</li><li>谈及资源时，主要是内存、CPU、io三种资源。YARN目前仅支持内存、CPU两种资源管理调度。</li><li>内存资源多少决定任务的成败；CPU多少决定任务的快慢。</li></ol></blockquote><h3 id="YARN的内存管理"><a href="#YARN的内存管理" class="headerlink" title="YARN的内存管理"></a><strong>YARN的内存管理</strong></h3><p>YARN允许用户配置每个节点上可用的物理内存资源。因为一个节点上内存会被若干个服务共享，比如一部分给YARN，一部分给hdfs等。YARN配置的只是自己可用的，配置参数主要有：</p><ul><li><code>yarn.nodemanager.resource.memory-mb</code>：表示节点上YARN可以使用的物理内存总量；</li><li><code>yarn.scheduler.minimum-allocation-mb</code>：单个任务可以使用最小物理内存量；</li><li><code>yarn.scheduler.maximum-allocation-mb</code>：单个任务可以申请的最多的内存量。</li></ul><h3 id="YARN的CPU管理"><a href="#YARN的CPU管理" class="headerlink" title="YARN的CPU管理"></a><strong>YARN的CPU管理</strong></h3><p>用户提交应用时，可以指定每个任务需要的虚拟CPU数。相关配置参数如下：</p><ul><li><code>yarn.nodemanager.resource.cpu-vcores</code>：表示该节点上可以使用的虚拟CPU个数；</li><li><code>yarn.scheduler.minimum-allocation-vcores</code>：表示单个任务可以申请的最小CPU个数；</li><li><code>yarn.scheduler.maximum-allocation-vcores</code>：表示单个任务可以申请最多虚拟CPU个数。</li></ul><h2 id="YARN程序运行机制"><a href="#YARN程序运行机制" class="headerlink" title="YARN程序运行机制"></a>YARN程序运行机制</h2><p><img src="Snipaste_2018-07-30_15-15-42.png" alt=""><br>首先，客户端联系<code>ResoureManager</code>，要求它运行一个<code>ApplicationManager</code>进程；然后，<code>ResoureManager</code>找到一个能够在<code>Container</code>中启动<code>ApplicationMaster</code>的<code>NodeManager</code>（步骤2a和2b）。<code>ApplicationMaster</code>一旦运行起来后能做些什么依赖于应用本身。有可能是在所处的容器中简单运行一个计算，并将结果返回给客户端；或者向<code>ResoureManager</code>请求更多的<code>Container</code>（步骤3），以用于运行一个分布式计算（步骤4a和4b）。<br>YARN本身不会为应用的各个部分彼此间通信提供任何手段。大多数重要的YARN应用使用某种形式的远程通信机制（例如Hadoop的RPC层）来向客户端传递状态更新和返回结果。</p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> YARN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YARN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scala之模式匹配</title>
      <link href="/2018/07/25/scala%E4%B9%8B%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2018/07/25/scala%E4%B9%8B%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>模式</strong>可以当做对某个类型，其内部数据在结构上抽象出来的表达式。<code>scala</code>中模式匹配使用<code>match</code>关键字。<code>match</code>可以当做是<code>java</code>风格的<code>switch</code>的广义化。但是有三个区别：</p><ul><li><code>scala</code>中的<code>match</code>是一个表达式，可以匹配各种情况；</li><li><code>scala</code>的可选分支不会贯穿到下一个<code>case</code>；</li><li>如果一个模式都没匹配上，会抛出<code>MatchError</code>的异常。一般会添加什么都不做的缺省<code>case</code>。</li></ul><h2 id="模式的种类"><a href="#模式的种类" class="headerlink" title="模式的种类"></a>模式的种类</h2><h3 id="通配模式"><a href="#通配模式" class="headerlink" title="通配模式"></a>通配模式</h3><p>通配模式<code>(_)</code>可以匹配任何对象。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeGrade</span></span>(grade:<span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  grade <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"others"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">judgeGrade(<span class="string">"hello"</span>) <span class="comment">//others</span></span><br></pre></td></tr></table></figure></p><h3 id="常量模式"><a href="#常量模式" class="headerlink" title="常量模式"></a>常量模式</h3><p>常量模式仅匹配自己。任何字面量都可以作为常量模式使用。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeGrade</span></span>(grade:<span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  grade <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span> =&gt; println(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span> =&gt; println(<span class="string">"B"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span> =&gt; println(<span class="string">"C"</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"others"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">judgeGrade(<span class="string">"A"</span>) <span class="comment">//A</span></span><br><span class="line">judgeGrade(<span class="string">"B"</span>) <span class="comment">//B</span></span><br></pre></td></tr></table></figure></p><h3 id="变量模式"><a href="#变量模式" class="headerlink" title="变量模式"></a>变量模式</h3><p>变量模式匹配任何对象。这一点和通配模式相同。不同之处在于变量模式会将对应的变量绑定在匹配的对象上。之后可以用这个变量对对象作进一步的处理。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchSomething</span></span>(something: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  something <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> =&gt; println(<span class="string">"zero"</span>)</span><br><span class="line">    <span class="keyword">case</span> something =&gt; println(<span class="string">"not zero: "</span> + something)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matchSomething(<span class="number">0</span>) <span class="comment">// zero</span></span><br><span class="line">matchSomething(<span class="number">1</span>) <span class="comment">// not zero: 1</span></span><br></pre></td></tr></table></figure></p><p>上例中<code>something</code>可以匹配任何除<code>0</code>外的<code>Int</code>值。<br>另外例子：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math.&#123;<span class="type">E</span>, <span class="type">Pi</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchPi</span></span>(x: <span class="type">Double</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Pi</span> =&gt; println(<span class="string">"Pi: "</span> + <span class="type">Pi</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"OK"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matchPi(<span class="type">E</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></p><p>可以看出<code>E</code>并不匹配<code>Pi</code>。<code>scala</code>采用了一个简单的词法来区分：<strong>一个以小写字母打头的简单名称会被当做模式变量处理，所有其他引用都是常量</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math.&#123;<span class="type">E</span>, <span class="type">Pi</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchpi</span></span>(x: <span class="type">Double</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> pi =&gt; println(<span class="string">"Pi: "</span> + pi)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"OK"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matchPi(<span class="type">E</span>) <span class="comment">// Pi: 2.718281828459045</span></span><br></pre></td></tr></table></figure></p><h3 id="构造方法模式"><a href="#构造方法模式" class="headerlink" title="构造方法模式"></a>构造方法模式</h3><p>如例所示。假设匹配的是一个样例类（<code>case class</code>），这样模式将首先检查被匹配的对象是否是以这个名称命名的样例类的实例，然后再检查这个对象的改造方法参数是否匹配这些额外给出的模式。<strong>如果不是样例类，则需要定义伴生对象并实现<code>unapply</code>方法。</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">ConstructorPattern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> p = <span class="type">Person</span>(<span class="string">"stm"</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constructorPattern</span></span>(p: <span class="type">Person</span>) = &#123;</span><br><span class="line">      p <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Person</span>(name, age) =&gt; println(<span class="string">"name: "</span> + name + <span class="string">", age: "</span> + age)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">"other"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructorPattern(p) <span class="comment">// name: stm, age: 25</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="序列模式"><a href="#序列模式" class="headerlink" title="序列模式"></a>序列模式</h3><p>可以和<code>Array</code>、<code>List</code>等序列类型匹配。在模式中可以给出任意数量的元素。其原理也是通过<code>case class</code>。<strong><code>_*</code>可以匹配剩余元素，包括0个。</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SequencePattern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">"spark"</span>, <span class="string">"hive"</span>)</span><br><span class="line">    <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="string">"scala"</span>, <span class="string">"java"</span>, <span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sequencePattern</span></span>(p: <span class="type">Any</span>) = p <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">List</span>(_, second, _*) =&gt; println(second)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Array</span>(first, second, _*) =&gt; println(first + <span class="string">", "</span> + second)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sequencePattern(list) <span class="comment">// hive</span></span><br><span class="line">    sequencePattern(arr)  <span class="comment">// scala, java</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="元组模式"><a href="#元组模式" class="headerlink" title="元组模式"></a>元组模式</h3><p>元组模式用于匹配<code>scala</code>中的元组内容。<strong><code>_*</code>不适用于元组。</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TuplePattern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tuple1 = (<span class="string">"spark"</span>, <span class="string">"hive"</span>, <span class="string">"hadoop"</span>)</span><br><span class="line">    <span class="keyword">val</span> tuple2 =(<span class="string">"java"</span>, <span class="string">"python"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tuplePattern</span></span>(t:<span class="type">Any</span>) = t <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> (one, _, _) =&gt; println(one)</span><br><span class="line">      <span class="keyword">case</span> (one, two) =&gt; println(one + <span class="string">", "</span> + two)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tuplePattern(tuple1) <span class="comment">// spark</span></span><br><span class="line">    tuplePattern(tuple2) <span class="comment">// java, python</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h3><p>可以用来替代类型测试和类型转换。<strong><code>Map[_, _]</code>匹配任意<code>Map</code>。</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TypePattern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">typePattern</span></span>(t:<span class="type">Any</span>) = t <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> t :<span class="type">String</span> =&gt; println(<span class="string">"t.length: "</span> + t.length)</span><br><span class="line">      <span class="keyword">case</span> t :<span class="type">Map</span>[_, _] =&gt; println(<span class="string">"t.size: "</span> + t.size)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typePattern(<span class="string">"hello"</span>) <span class="comment">// t.length: 5</span></span><br><span class="line">    typePattern(<span class="type">Map</span>(<span class="number">1</span>-&gt;'a', <span class="number">2</span>-&gt;'b')) <span class="comment">// t.size: 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><p><code>java</code>和<code>scala</code>中都采用了<strong>擦除式</strong>的泛型。<strong>即在运行中无法判定某个给定的Map对象是用两个<code>Int</code>类型参数创建还是其他类型。但是数组除外。</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TypeErasure</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m1 = <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> m2 = <span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="string">"a"</span>, <span class="number">2</span>-&gt; <span class="string">"b"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isIntIntMap</span></span>(x:<span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> m:<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Int</span>] =&gt; println(<span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isIntIntMap(m1) <span class="comment">//true</span></span><br><span class="line">    isIntIntMap(m2) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isStringArray</span></span>(x:<span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> x : <span class="type">Array</span>[<span class="type">String</span>] =&gt; println(<span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isStringArray(<span class="type">Array</span>(<span class="string">"hello"</span>)) <span class="comment">//true</span></span><br><span class="line">    isStringArray(<span class="type">Array</span>(<span class="number">33</span>))      <span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变量绑定模式"><a href="#变量绑定模式" class="headerlink" title="变量绑定模式"></a>变量绑定模式</h3><p>可以对任何其他模式添加变量。只需要写下变量名、一个@符合模式本身，就得到一个变量绑定模式。如果匹配成功，就将匹配的对象赋值给这个变量。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">VariableBindingPattern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> t = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>), <span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">variableBindingPattern</span></span>(t:<span class="type">Any</span>) = t <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">List</span>(_, e<span class="meta">@List</span>(_, _, _)) =&gt; println(e)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    variableBindingPattern(t) <span class="comment">//List(4, 5, 6)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模式守卫"><a href="#模式守卫" class="headerlink" title="模式守卫"></a>模式守卫</h2><p>使用<code>if</code>表达式。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">PatternGuards</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patternGuards</span></span>(x: <span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">List</span>(first, _*) <span class="keyword">if</span> first == <span class="number">1</span> =&gt; println(x)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">"others"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    patternGuards(list1) <span class="comment">//List(1, 2, 3)</span></span><br><span class="line">    patternGuards(list2) <span class="comment">//others</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scala case 之类与对象</title>
      <link href="/2018/07/24/scala-case-%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/07/24/scala-case-%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要介绍<code>case class</code>与普通<code>class</code>的一些区别。以及<code>case class</code>与<code>case object</code>的异同点。</p><h2 id="case-class与class的区别"><a href="#case-class与class的区别" class="headerlink" title="case class与class的区别"></a><code>case class</code>与<code>class</code>的区别</h2><blockquote><p><code>Person.scala</code>源码，运行后生成<code>Person$.class</code>和<code>Person.class</code>两个文件。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">age:<span class="type">Int</span>, name:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="number">25</span>,<span class="string">"stm"</span>)</span><br><span class="line">    println(person.toString)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对<code>Person.class</code>反编译如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.Function1;</span><br><span class="line"><span class="keyword">import</span> scala.Option;</span><br><span class="line"><span class="keyword">import</span> scala.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.stm.datastructures.caseClass;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>;</span><br><span class="line"><span class="keyword">import</span> scala.Serializable;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"><span class="keyword">import</span> scala.collection.Iterator;</span><br><span class="line"><span class="keyword">import</span> scala.reflect.ScalaSignature;</span><br><span class="line"><span class="keyword">import</span> scala.runtime.BoxesRunTime;</span><br><span class="line"><span class="keyword">import</span> scala.runtime.ScalaRunTime.;</span><br><span class="line"><span class="keyword">import</span> scala.runtime.Statics;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ScalaSignature</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Product</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        Product.class.$init$(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object x$<span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != x$<span class="number">1</span>) &#123;</span><br><span class="line">            Object localObject = x$<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">if</span> ((localObject <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span> label96;</span><br><span class="line">            &#125;</span><br><span class="line">            Person localPerson = (Person) x$<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (age() == localPerson.age()) &#123;</span><br><span class="line">                str = localPerson.name();</span><br><span class="line">                String tmp54_44 = name();</span><br><span class="line">                <span class="keyword">if</span> (tmp54_44 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    tmp54_44;</span><br><span class="line">                    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span> label75;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmpTernaryOp = tmp54_44;</span><br><span class="line">                    <span class="keyword">break</span> label88;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScalaRunTime..MODULE$._toString(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">889275714</span>;</span><br><span class="line">        i = Statics.mix(i, age());</span><br><span class="line">        i = Statics.mix(i, Statics.anyHash(name()));</span><br><span class="line">        <span class="keyword">return</span> Statics.finalizeHash(i, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object x$<span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x$<span class="number">1</span> <span class="keyword">instanceof</span> Person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Object&gt; <span class="title">productIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScalaRunTime..MODULE$.typedProductIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">productElement</span><span class="params">(<span class="keyword">int</span> x$<span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = x$<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(BoxesRunTime.boxToInteger(x$<span class="number">1</span>).toString());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BoxesRunTime.boxToInteger(age());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">productArity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">productPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String copy$<span class="keyword">default</span>$<span class="number">2</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> copy$<span class="keyword">default</span>$<span class="number">1</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> age();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">copy</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function1&lt;Object, Function1&lt;String, Person&gt;&gt; curried() &#123;</span><br><span class="line">        <span class="keyword">return</span> Person..MODULE$.curried();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function1&lt;Tuple2&lt;Object, String&gt;, Person&gt; tupled() &#123;</span><br><span class="line">        <span class="keyword">return</span> Person..MODULE$.tupled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">apply</span><span class="params">(<span class="keyword">int</span> paramInt, String paramString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Person..MODULE$.apply(paramInt, paramString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Option&lt;Tuple2&lt;Object, String&gt;&gt; unapply(Person paramPerson) &#123;</span><br><span class="line">        <span class="keyword">return</span> Person..MODULE$.unapply(paramPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对<code>Person$.class</code>编译如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.Option;</span><br><span class="line"><span class="keyword">import</span> scala.Serializable;</span><br><span class="line"><span class="keyword">import</span> scala.Some;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"><span class="keyword">import</span> scala.runtime.AbstractFunction2;</span><br><span class="line"><span class="keyword">import</span> scala.runtime.BoxesRunTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>$</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractFunction2</span>&lt;<span class="title">Object</span>, <span class="title">String</span>, <span class="title">Person</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MODULE$;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person$() &#123;</span><br><span class="line">        MODULE$ = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MODULE$;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Option&lt;Tuple2&lt;Object, String&gt;&gt; unapply(Person x$<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x$<span class="number">0</span> == <span class="keyword">null</span> ? None..MODULE$:</span><br><span class="line">        <span class="keyword">new</span> Some(<span class="keyword">new</span> Tuple2(BoxesRunTime.boxToInteger(x$<span class="number">0</span>.age()), x$<span class="number">0</span>.name()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">apply</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>Student.scala</code>源码，运行后生成<code>Student$.class</code>和<code>Student.class</code>两个文件。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">val age:<span class="type">Int</span>, val name:<span class="type">String</span></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> stu = <span class="keyword">new</span> <span class="type">Student</span>(<span class="number">25</span>, <span class="string">"stm"</span>)</span><br><span class="line">    println(stu)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对<code>Student.class</code>反编译如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.reflect.ScalaSignature;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ScalaSignature</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span> </span>&#123;</span><br><span class="line">        Student..MODULE$.main(paramArrayOfString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>对<code>Student$.class</code>反编译如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.Predef.;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>$ </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MODULE$;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="number">25</span>, <span class="string">"stm"</span>);</span><br><span class="line">        Predef..MODULE$.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student$() &#123;</span><br><span class="line">        MODULE$ = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>从编译结果，可以看出一下几点：</p><ol><li><p>生成了<code>apply</code>方法，可以直接把对象当做方法使用。</p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = <span class="type">Person</span>(<span class="number">25</span>,<span class="string">"stm"</span>)</span><br></pre></td></tr></table></figure></li><li><p>继承了<code>Product</code>和<code>Serializable</code>。</p></li><li><code>age</code>和<code>name</code>是用<code>final</code>修饰的。</li><li>默认实现了<code>toString</code>。</li><li><p>实现了<code>name()</code>和<code>age()</code>方法。（参数列表中的参数都隐式获得一个<code>val</code>作为前缀）</p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(person1.age) <span class="comment">//25</span></span><br><span class="line">println(person1.name) <span class="comment">//stm</span></span><br></pre></td></tr></table></figure></li><li><p>重写了<code>equals</code>方法，比较<code>structure</code>而不是<code>reference</code>:</p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person1 = <span class="type">Person</span>(<span class="number">25</span>, <span class="string">"stm"</span>)</span><br><span class="line"><span class="keyword">val</span> person2 = <span class="type">Person</span>(<span class="number">25</span>, <span class="string">"stm"</span>)</span><br><span class="line">println(person1 == person2) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="case-object与case-class区别"><a href="#case-object与case-class区别" class="headerlink" title="case object与case class区别"></a><code>case object</code>与<code>case class</code>区别</h2><ol><li><code>case object</code>反编译后没有<code>apply</code>和<code>unapply</code>方法，因为<code>caes object</code>没有参数。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>case class</code>和<code>case object</code>本质没区别，有参使用<code>case class</code>，无参使用<code>case object</code>;</li><li><code>case class</code>和<code>case object</code>增加了继承和方法。</li><li><code>case class</code>和<code>case object</code>支持模式匹配。</li></ol>]]></content>
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spark之RDD基础简介</title>
      <link href="/2018/07/19/spark%E4%B9%8BRDD%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/07/19/spark%E4%B9%8BRDD%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="RDD简介"><a href="#RDD简介" class="headerlink" title="RDD简介"></a>RDD简介</h2><p>RDD全称为弹性分布式数据集（Resilient Distributed Dataset），是<code>spark</code>的编程模型，是<code>MapReduce</code>模型的扩展和延伸，可以在并行计算阶段高效地进行数据共享。</p><h2 id="RDD基础"><a href="#RDD基础" class="headerlink" title="RDD基础"></a>RDD基础</h2><h3 id="RDD类型"><a href="#RDD类型" class="headerlink" title="RDD类型"></a>RDD类型</h3><p>RDD主要分为以下四种类型：</p><ul><li>创建操作：用于RDD创建工作。主要有两种方法：来自于内存集合和外部存储系统；通过转换操作生成的RDD。</li><li>转换操作：将RDD通过一定的操作变换成新的RDD。</li><li>控制操作：进行RDD持久化。让RDD根据不同的存储策略保存在内存或者磁盘中。</li><li>行动操作：能够触发<code>spark</code>运行的操作。<code>spark</code>中行动操作分为两类：一类的操作结果变成<code>scala</code>集合或变量，另一类的操作是将RDD保存到外部文件系统或者数据库中。</li></ul><h3 id="创建RDD"><a href="#创建RDD" class="headerlink" title="创建RDD"></a>创建RDD</h3><ul><li>并行化集合创建操作<blockquote><p>使用<code>SparkContext</code>的<code>parallelize</code>方法，在一个已经存在的<code>scala</code>集合上创建。集合的对象将会被复制，创建出一个可以被并行操作的分布式数据集。<br>  <img src="Snipaste_2018-07-19_15-55-57.png" alt=""></p></blockquote></li><li>外部存储创建操作<blockquote><p><code>spark</code>可以将任何<code>Hadoop</code>所支持的存储资源转换成RDD。<br>  <img src="Snipaste_2018-07-19_15-57-45.png" alt=""></p></blockquote></li></ul><h3 id="RDD依赖关系"><a href="#RDD依赖关系" class="headerlink" title="RDD依赖关系"></a>RDD依赖关系</h3><p>主要分为窄依赖和宽依赖：</p><ul><li>窄依赖：每个父RDD的分区都至多被一个子RDD的分区使用。</li><li>宽依赖：多个子RDD的分区依赖一个父RDD的分区。<blockquote><p>读取文件<br>  <img src="Snipaste_2018-07-19_14-38-22.png" alt=""><br><code>wordmap</code>的依赖关系是<code>OneToOneDependency</code>，属于窄依赖<br>  <img src="Snipaste_2018-07-19_14-39-18.png" alt=""><br>使用<code>reduceByKey</code>操作对单词进行计数<br>  <img src="Snipaste_2018-07-19_14-44-00.png" alt=""><br><code>wordreduce</code>的依赖关系是<code>ShuffleDependency</code>，属于宽依赖<br>  <img src="Snipaste_2018-07-19_14-45-49.png" alt=""></p></blockquote></li></ul><h3 id="RDD的分区数"><a href="#RDD的分区数" class="headerlink" title="RDD的分区数"></a>RDD的分区数</h3><p>RDD划分很多的分区（partition）分布到集群的节点中，分区的多少涉及对这个RDD进行并行计算的粒度。分区是个逻辑概念。用户可以在读取文件时指定分区数目。默认数值是改程序所分配到的CPU核数，如果从HDFS进行创建，则默认为文件的副本数。</p><h3 id="RDD分区计算（Iterator）"><a href="#RDD分区计算（Iterator）" class="headerlink" title="RDD分区计算（Iterator）"></a>RDD分区计算（<code>Iterator</code>）</h3><p><code>spark</code>中RDD计算是以分区为单位的，而且计算函数都是对迭代器复合，不需要保存每次计算的结果。分区计算一般使用<code>mapPartitions</code>等操作进行。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitions</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](f: <span class="type">Iterator</span>[<span class="type">T</span>] =&gt; <span class="type">Iterator</span>[<span class="type">U</span>], preservesPartitioning: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">RDD</span>[<span class="type">U</span>]</span><br></pre></td></tr></table></figure></p><p><code>f</code>为输入函数，处理每个分区里面的内容。</p><blockquote><p>函数<code>iterfunc</code>把分区中一个元素和他的下个元素组成一个<code>Turple</code><br><img src="Snipaste_2018-07-19_15-07-56.png" alt=""></p></blockquote><h3 id="RDD分区函数（Partitioner）"><a href="#RDD分区函数（Partitioner）" class="headerlink" title="RDD分区函数（Partitioner）"></a>RDD分区函数（<code>Partitioner</code>）</h3><p><code>spark</code>默认提供两种划分器：哈希分区划分器（<code>HashPartitioner</code>）和范围分区划分器（<code>RangePartitioner</code>），且<code>Partitioner</code>只存在<code>(K, V)</code>类型的RDD中，对于非<code>(K, V)</code>类型的RDD，其<code>Partitioner</code>值为<code>None</code>。</p><blockquote><p>参数4是<code>group_rdd</code>最终拥有的分区数<br><img src="Snipaste_2018-07-19_15-43-03.png" alt=""></p></blockquote><h3 id="RDD基本转换操作"><a href="#RDD基本转换操作" class="headerlink" title="RDD基本转换操作"></a>RDD基本转换操作</h3><ul><li><code>map</code>：<br><img src="Snipaste_2018-07-19_23-35-36.png" alt=""></li><li><code>flatMap</code>：<br><img src="Snipaste_2018-07-20_09-06-18.png" alt=""></li><li><code>distinct</code>：<br><img src="Snipaste_2018-07-20_09-06-57.png" alt=""></li><li><code>coalesce</code>：对RDD重新分区。第一个参数是重分区的数目，第二个参数为是否进行<code>shuffle</code>，默认为<code>false</code>。如果重分区的数目大于原分区，则需要设为<code>True</code>。<br><img src="Snipaste_2018-07-20_09-11-53.png" alt=""></li><li><code>repartition</code>：是<code>coalesce</code>第二个参数为<code>True</code>时的实现。</li><li><code>randomSplit</code>：<br><img src="Snipaste_2018-07-20_09-15-16.png" alt=""><br><img src="Snipaste_2018-07-20_09-38-37.png" alt=""></li><li><code>union</code>：结果不去重。<br><img src="Snipaste_2018-07-20_09-47-21.png" alt=""></li><li><code>mapPartitions</code></li><li><code>mapPartitionsWithIndex</code></li><li><code>zip</code>：将两个同样分区RDD进行合并，键值分别对照组合。分区不同的两个RDD会报异常。<br><img src="Snipaste_2018-07-20_09-54-35.png" alt=""></li></ul><h3 id="RDD键值转换操作"><a href="#RDD键值转换操作" class="headerlink" title="RDD键值转换操作"></a>RDD键值转换操作</h3><ul><li><code>reduceByKey</code>：将<code>RDD[K, V]</code>中每个K对应的V根据映射函数进行计算。<br><img src="Snipaste_2018-07-20_10-34-28.png" alt=""><br><img src="Snipaste_2018-07-20_10-40-55.png" alt=""></li><li><code>reduceByKeyLocally</code>：同<code>reduceByKey</code>，不过是将结果映射到一个<code>Map[K, V]</code>中。</li><li><code>join</code>、<code>fullOuterJoin</code>、<code>leftOuterJoin</code>、<code>rightOuterJoin</code>：<blockquote><p><code>join</code> 内连接操作：<br>  <img src="Snipaste_2018-07-20_10-55-28.png" alt=""><br><code>leftOuterJoin</code> 左连接操作：<br>  <img src="Snipaste_2018-07-20_10-56-31.png" alt=""><br><code>rightOuterJoin</code> 右连接操作：<br>  <img src="Snipaste_2018-07-20_10-56-54.png" alt=""></p></blockquote></li></ul><h3 id="RDD行动操作"><a href="#RDD行动操作" class="headerlink" title="RDD行动操作"></a>RDD行动操作</h3><ul><li><code>aggregate</code>：<br><img src="Snipaste_2018-07-20_11-15-27.png" alt=""><blockquote><p>进行<code>aggregate</code>操作：<br>先在每个分区中迭代执行 <code>(x:Int, y:Int) =&gt; x + y</code>，并且<code>zeroValue</code>为1，即分区1中为<code>1+5+4+3+2+1=16</code>，分区2中为<code>1+10+9+8+7+6=41</code><br>再将两个分区进行合并，<code>1+16+41=58</code><br><img src="Snipaste_2018-07-20_11-20-22.png" alt=""></p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要对RDD的四种操作进行了简单汇总，后续将对一些操作函数进行扩充完善。</p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> RDD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scala中的map和flatMap的区别</title>
      <link href="/2018/07/16/scala%E4%B8%AD%E7%9A%84map%E5%92%8CflatMap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/07/16/scala%E4%B8%AD%E7%9A%84map%E5%92%8CflatMap%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Titan图形数据库学习笔记（一）</title>
      <link href="/2018/07/10/Titan%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/07/10/Titan%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="Titan数据库简介"><a href="#Titan数据库简介" class="headerlink" title="Titan数据库简介"></a>Titan数据库简介</h2><blockquote><p>Titan 是一个可扩展的图形数据库，结合HBase、Cassandra、BerkeleyDB提供存储功能，ES、Lucene、Solar提供索引功能，可利用Hadoop计算框架对图数据进行分析、统计。经过优化，可用于存储和索引分布于多节点集群的百亿级顶点和边的图，同时，Titan又是一个事务数据库，可以支持数千个并发用户实时执行复杂图形遍历。 </p></blockquote><ol><li>框架<br>Titan是一个图形数据库引擎，其本身专注于紧凑图表序列化，丰富的图形数据库建模和高效的查询执行。其框架主要如下:<br> <img src="Snipaste_2018-07-10_13-57-47.png" alt=""><ul><li>Titan与底层磁盘之间有多个存储和索引适配器：<ul><li>存储：<ul><li>Cassandra</li><li>HBase</li><li>BerkeleyDB</li></ul></li><li>索引：<ul><li>Elasticsearch</li><li>Solr</li><li>Lucene</li></ul></li></ul></li><li>Titan提供了三种交互式接口：<ul><li>TitanGraph API</li><li>TinkPop API</li><li>Management API</li></ul></li></ul></li></ol><h2 id="Titan数据库环境配置"><a href="#Titan数据库环境配置" class="headerlink" title="Titan数据库环境配置"></a>Titan数据库环境配置</h2><ol><li>下载<a href="https://github.com/thinkaurelius/titan/wiki/Downloads" target="_blank" rel="noopener">titan-1.0.0-hadoop2.zip</a>解压。</li><li><p>配置文件</p><ul><li><p>进入<code>conf/es</code>文件夹，配置<code>elasticsearch.yml</code>，截取如下：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">path.data:</span> <span class="string">db/es/data</span></span><br><span class="line"><span class="string">path.work:</span> <span class="string">db/es/work</span></span><br><span class="line"><span class="string">path.logs:</span> <span class="string">log</span></span><br><span class="line"><span class="string">path.plugins:</span> <span class="string">bin/esplugins</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">22.144</span><span class="number">.110</span><span class="number">.125</span></span><br><span class="line"><span class="string">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["hadoop1","hadoop2","hadoop3","hadoop4","hadoop5","hadoop6"]</span></span><br></pre></td></tr></table></figure></li><li><p>进入<code>conf</code>文件夹，配置<code>titan-hbase-es.properties</code>，截取如下：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">storage.backend=hbase</span></span><br><span class="line"><span class="string">storage.hostname=hadoop1,</span> <span class="string">hadoop2,</span> <span class="string">hadoop3,</span> <span class="string">hadoop4,</span> <span class="string">hadoop5,</span> <span class="string">hadoop6</span></span><br><span class="line"><span class="string">cache.db-cache</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">cache.db-cache-clean-wait</span> <span class="string">=</span> <span class="number">20</span></span><br><span class="line"><span class="string">cache.db-cache-time</span> <span class="string">=</span> <span class="number">180000</span></span><br><span class="line"><span class="string">cache.db-cache-size</span> <span class="string">=</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">index.search.backend=elasticsearch</span></span><br><span class="line"><span class="string">index.search.hostname=hadoop5</span></span><br><span class="line"><span class="string">index.search.elasticsearch.client-only=true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动</p><ul><li>进入<code>bin</code>目录，运行<code>elasticsearch</code>：<br>  <img src="Snipaste_2018-07-11_14-35-21.png" alt=""></li><li>重开终端，运行<code>gremlin.sh</code>：<br>  <img src="Snipaste_2018-07-11_14-37-53.png" alt=""></li><li><p>输入以下脚本：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph = TitanFactory.open(<span class="string">'../conf/titan-hbase-es.properties'</span>)</span><br><span class="line">g = graph.traversal()</span><br><span class="line">saturn = g.V().has(<span class="string">'name'</span>, <span class="string">'saturn'</span>).next()</span><br></pre></td></tr></table></figure><p>  <img src="Snipaste_2018-07-11_15-04-23.png" alt=""><br>  <img src="Snipaste_2018-07-11_15-05-54.png" alt=""></p></li></ul></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://s3.thinkaurelius.com/docs/titan/1.0.0/getting-started.html" target="_blank" rel="noopener">http://s3.thinkaurelius.com/docs/titan/1.0.0/getting-started.html</a></li><li><a href="http://database.51cto.com/art/201804/570147.htm" target="_blank" rel="noopener">http://database.51cto.com/art/201804/570147.htm</a></li><li><a href="https://blog.csdn.net/samhacker/article/details/39721131" target="_blank" rel="noopener">https://blog.csdn.net/samhacker/article/details/39721131</a></li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> 图形数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Titan </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于华为云的CDH配置介绍</title>
      <link href="/2018/06/28/%E5%9F%BA%E4%BA%8E%E5%8D%8E%E4%B8%BA%E4%BA%91%E7%9A%84CDH%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/28/%E5%9F%BA%E4%BA%8E%E5%8D%8E%E4%B8%BA%E4%BA%91%E7%9A%84CDH%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><blockquote><p>说明：参考文章<a href="https://shitianming.github.io/2018/06/27/CDH%E4%BC%AA%E5%88%86%E5%B8%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/">CDH伪分布搭建教程</a>。此处作为补充。整个操作在root用户下进行。 </p></blockquote><ol><li><p>安装图形化界面（非必须）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">"X Window System"</span>  <span class="comment">#1</span></span><br><span class="line">yum groupinstall <span class="string">"GNOME Desktop"</span> <span class="string">"Graphical Administration Tools"</span>   <span class="comment">#2</span></span><br><span class="line">ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target  <span class="comment">#3</span></span><br><span class="line">reboot  <span class="comment">#4</span></span><br></pre></td></tr></table></figure></li><li><p>安装Anaconda</p><blockquote><p>说明：考虑到多用户使用存在的权限问题，将安装路径设置为<code>/usr/local/anaconda3</code>。 </p></blockquote><ul><li><p>更改权限：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 Anaconda3-5.1.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>执行安装，安装过程中手动添加安装路径<code>/usr/local/anaconda3</code>，选择添加<code>path</code>至<code>~/.bashrc</code>中，不安装Mircosoft vsCode。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh Anaconda3-5.1.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>添加spyder链接：</p><blockquote><p>方便在MobaXterm中打开图形化界面。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/anaconda3/bin/spyder /usr/bin/spyder</span><br></pre></td></tr></table></figure></blockquote></li><li><p>重启：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="添加hive服务"><a href="#添加hive服务" class="headerlink" title="添加hive服务"></a>添加hive服务</h2><ol><li><p>添加hive所需库：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在mysql中执行</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'hive'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'Password3#'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'Password3#'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> metastore;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> hive <span class="built_in">character</span> <span class="keyword">set</span> latin1;</span><br></pre></td></tr></table></figure></li><li><p>添加zookeeper服务</p></li><li>添加hive服务，数据库选择<code>metastore</code></li></ol><h2 id="添加spark2服务"><a href="#添加spark2服务" class="headerlink" title="添加spark2服务"></a>添加spark2服务</h2><ol><li><p>准备文件</p><ul><li><p><a href="http://archive.cloudera.com/spark2/parcels/latest/" target="_blank" rel="noopener">spark2</a><br>  <img src="Snipaste_2018-06-29_09-21-18.png" alt=""><br>  <img src="Snipaste_2018-06-29_09-31-33.png" alt=""></p></li><li><p><a href="https://repo.continuum.io/pkgs/misc/parcels/" target="_blank" rel="noopener">Anaconda</a><br>  <img src="Snipaste_2018-06-29_09-21-57.png" alt=""></p></li></ul></li><li><p>安装步骤</p><ul><li>将<code>SPARK2_ON_YARN-2.1.0.cloudera2.jar</code>拷贝到<code>/opt/cloudera/csd</code>，并且更改用户权限<code>chown cloudera-scm:cloudera-scm</code></li><li>将其他文件拷贝到<code>/opt/cloudera/parcel-repo</code></li><li><p>关闭CDH集群，重启<code>cm server</code>和<code>cm agent</code>，启动CDH集群:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service cloudera-scm-server restart</span><br><span class="line">service cloudera-scm-agent restart</span><br></pre></td></tr></table></figure></li><li><p>进入cm页面，选择<code>Hosts</code>——&gt;<code>Parcels</code>:<br>  <img src="Snipaste_2018-06-29_09-52-51.png" alt=""></p></li><li>按照提示进行分配安装，激活：<br>  <img src="Snipaste_2018-06-29_09-53-55.png" alt=""></li><li>点击集群，添加spark2服务。</li></ul></li><li>在python中正常import pyspark<ul><li>在<code>/etc/profile</code>中添加如下配置：<br><img src="Snipaste_2018-06-29_16-48-26.png" alt=""></li></ul></li></ol><h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><ul><li>问题1：<br>安装成功后运行pyspark代码报错：<br><img src="Snipaste_2018-06-29_09-58-27.png" alt=""><br>启动spark-shell报无法获取资源：<br><img src="Snipaste_2018-06-29_16-36-31.png" alt=""><blockquote><p>查到的资料：</p><ul><li><a href="https://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi/42324377" target="_blank" rel="noopener">https://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi/42324377</a></li><li><a href="http://www.cnblogs.com/zlslch/p/6683814.html" target="_blank" rel="noopener">http://www.cnblogs.com/zlslch/p/6683814.html</a></li><li><a href="http://community.cloudera.com/t5/Advanced-Analytics-Apache-Spark/spark-shell-stuck/td-p/57603" target="_blank" rel="noopener">http://community.cloudera.com/t5/Advanced-Analytics-Apache-Spark/spark-shell-stuck/td-p/57603</a></li><li><a href="https://community.cloudera.com/t5/Advanced-Analytics-Apache-Spark/Endless-INFO-Client-Application-report-for-application-xx/m-p/31461" target="_blank" rel="noopener">https://community.cloudera.com/t5/Advanced-Analytics-Apache-Spark/Endless-INFO-Client-Application-report-for-application-xx/m-p/31461</a></li></ul></blockquote></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>centOS7 端口占用解决</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -lnp|grep 4040</span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><p> <img src="Snipaste_2018-06-29_16-45-42.png" alt=""></p></li></ol>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> CDH环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> 华为云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github&amp;hexo博客搭建教程</title>
      <link href="/2018/06/28/github-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/28/github-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>CDH伪分布搭建教程</title>
      <link href="/2018/06/27/CDH%E4%BC%AA%E5%88%86%E5%B8%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/27/CDH%E4%BC%AA%E5%88%86%E5%B8%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><ul><li><p>配置hosts</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line">    192.168.137.134 master</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.jianshu.com/p/d6414b5295b8" target="_blank" rel="noopener">关闭防火墙</a></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service  #停止firewall</span><br><span class="line">sudo systemctl disable firewalld.service  #禁止firewall开机启动</span><br><span class="line">sudo /etc/sysconfig/selinux</span><br><span class="line">    SELINUX=disabled  #修改</span><br><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure></li><li><p>配置无密码登陆<br>  <img src="Snipaste_2018-05-30_20-21-36.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-30_20-26-15.png" alt=""></p></li></ul><ul><li><p>配置本地yum源</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/src #1. 将CentOS-7-x86_64-DVD-1611.iso拷贝至此</span><br><span class="line">sudo mkdir /usr/local/media #2.</span><br><span class="line">sudo mount -o loop /usr/local/src/CentOS-7-x86_64-DVD-1611.iso /usr/local/mediaCentOS7/ #3.</span><br><span class="line">vim /etc/yum.repos.d/CentOS7-Localsource.repo #4. 并添加一下内容</span><br><span class="line">    [CentOS7-Localsource]</span><br><span class="line">    name=CentOS7</span><br><span class="line">    baseurl=file:///usr/local/media/CentOS7</span><br><span class="line">    enabled=1</span><br><span class="line">    gpgcheck=0</span><br><span class="line">sudo yum clean all #5.</span><br><span class="line">sudo yum makecache  #6.</span><br></pre></td></tr></table></figure></li><li><p>安装JDK</p><ul><li><p>卸载openJDK</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -qa | grep java</span><br><span class="line">sudo yum remove java*</span><br></pre></td></tr></table></figure></li><li><p>安装Oracle JDK</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xvf jdk-8u144-linux-x64.gz #路径：/usr/java</span><br><span class="line"></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">    # 末尾添加</span><br><span class="line">    export JAVA_HOME=/usr/java/jdk1.8.0_144</span><br><span class="line">    export CLASSPATH=.:$CLASSPTAH:$JAVA_HOME/lib</span><br><span class="line">    export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>安装成功显示<br>  <img src="Snipaste_2018-05-30_21-49-01.png" alt=""></p></li></ul></li><li><p>拷贝JDBC驱动包</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java.jar /usr/share/java #路径需要创建</span><br></pre></td></tr></table></figure></li><li><p>时区配置</p><ul><li><p>查看时区</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -R</span><br></pre></td></tr></table></figure></li><li><p>若不为+0800则更改时区为上海</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><a href="https://www.linuxidc.com/Linux/2016-09/135288.htm" target="_blank" rel="noopener">安装mysql数据库</a></p><ul><li><p>安装mysql</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line">sudo systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>更改密码<br>  <img src="Snipaste_2018-05-30_21-54-14.png" alt=""></p></li><li>创建cm配置过程中所需的库<br>  <img src="Snipaste_2018-05-30_21-59-20.png" alt=""></li><li>配置用户权限<br>  <img src="Snipaste_2018-05-30_21-56-55.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-30_21-58-14.png" alt=""></li></ul></li></ul><h2 id="CM安装"><a href="#CM安装" class="headerlink" title="CM安装"></a>CM安装</h2><ul><li><p>在节点安装CM</p><ul><li>拷贝CM相关文件至指定目录<br>  <img src="Snipaste_2018-05-30_22-06-29.png" alt=""></li><li><p>安装</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall --nogpgcheck *.rpm</span><br><span class="line">sudo ./scm_prepare_database.sh mysql -hmaster -uamon -pPassword3# --scm-host master scm scm Password3#</span><br></pre></td></tr></table></figure><p>  <img src="Snipaste_2018-05-30_22-17-21.png" alt=""></p></li></ul></li></ul><h2 id="CDH服务安装"><a href="#CDH服务安装" class="headerlink" title="CDH服务安装"></a>CDH服务安装</h2><ul><li><p>启动服务</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service cloudera-scm-server start</span><br><span class="line">sudo service cloudera-scm-agent start</span><br></pre></td></tr></table></figure></li><li><p>准备安装文件<br>  <img src="Snipaste_2018-05-30_22-25-07.png" alt=""></p></li><li>安装cdh<ul><li>登录master:7180，显示如下界面，user/password:admin/admin<br>  <img src="Snipaste_2018-05-30_22-27-15.png" alt=""></li><li>选择试用版<br>  <img src="Snipaste_2018-05-30_22-29-08.png" alt=""></li><li>选择节点<br>  <img src="Snipaste_2018-05-30_22-30-18.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-30_22-30-31.png" alt=""></li><li>安装cdh<br>  <img src="Snipaste_2018-05-31_00-03-54.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-04-34.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-05-09.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-10-41.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-14-54.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-15-29.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-16-47.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-18-34.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-19-12.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-41-40.png" alt=""><br>  <br><br>  <img src="Snipaste_2018-05-31_00-46-55.png" alt=""></li></ul></li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>问题1：<ul><li>安装yarn的过程中出错：<br>  <img src="Snipaste_2018-05-31_00-36-24.png" alt=""></li><li>解决方案<br>  <a href="http://www.cnblogs.com/DBA-Ivan/p/7898235.html" target="_blank" rel="noopener">更改目录权限</a><br>  <img src="Snipaste_2018-05-31_00-54-58.png" alt=""><br>  <img src="Snipaste_2018-05-31_00-55-05.png" alt=""></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
